// Regression for #215
effect Emit a with
    emit: fn a -> Unit

iota (n: U32) = loop (i = 0) ->
    if i < n then
        emit i
        recur (i + 1)

filter stream predicate =
    handle stream ()
    | emit x ->
        if predicate x then
            emit x
        resume ()

for stream f =
    handle stream ()
    | emit x ->
        f x
        resume ()

iota 10
    with filter (fn x -> x % 2 == 0)
    with for print

// args: --check --show-types
// expected stdout:
// // id = c1m72_9
// effect Emit_? a_1 with
//     emit_2: fn a_1 -> Unit_b
// 
// // id = c1m72_99
// iota_? (n_1: U32) = (error)
// 
// // id = c1m72_79
// filter_? stream_1 predicate_2 =
//     handle stream_? ()
//     | emit_? x_? -> 
//         if predicate_? x_? then 
//             emit_? x_?
// 
// // id = c1m72_64
// for_? stream_1 f_2 =
//     handle stream_? ()
//     | emit_? x_? -> 
//         f_? x_?
//         resume_? ()

// expected stderr:
// examples/typechecking/effects_subset.an:5:16	error: Expected an expression but found `loop`
// iota (n: U32) = loop (i = 0) ->
// 
// examples/typechecking/effects_subset.an:15:8	error: Expected an unindent but found `resume`
//         resume ()
// 
// examples/typechecking/effects_subset.an:24:4	error: Expected `=` to begin the function body but found `with`
//     with filter (fn x -> x % 2 == 0)

