
add m n = fn f -> fn x -> m f (n f x)  // (a -> b -> c) -> (a -> d -> b) -> a -> d -> c

one f x = f x  // (a -> b) -> a -> b
two1 f x = f (f x) // (a -> a) -> a -> a

two2 = add one one

// id is polymorphic, expect no error here
main () =
    id 3
    id "four"

id x = x

// args: --show-types
// expected exit status: 101
// expected stderr:
// thread 'main' panicked at src/type_inference/get_type.rs:28:17:
// GetType used on definition without a type annotation that has not yet been inferred. This is likely an issue with the order of type checking determined by the dependency graph.
// note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

