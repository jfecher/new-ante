// Mutually recursive definitions which type check when partially annotated despite
// `t != u` and neither ex1a nor ex1b being generalized when ex1b is called within ex1a.
// To do this we need to initialize them with partially generalized types:
//   ex1a: forall t. t -> b1 -> r1
//   ex1b: forall u. u -> b2 -> r2
// Such that b1, b2, r1, and r2 can still be further refined.
ex1a (a: t) b =
    ex1b a b
    0u32

ex1b (a: u) b =
    ex1a a b
    1u32


// Second example
trait T1 a with trait1: fn a -> Unit
trait T2 a with trait2: fn a -> Unit

ex2a (a: t) b =
    ex2b a b
    trait1 a

ex2b (a: u) b =
    ex2c a b
    trait2 a

ex2c (a: v) b =
    ex2a a b

// args: --show-types
// expected exit status: 101
// expected stderr:
// thread 'main' panicked at src/type_inference/get_type.rs:28:17:
// GetType used on definition without a type annotation that has not yet been inferred. This is likely an issue with the order of type checking determined by the dependency graph.
// note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

