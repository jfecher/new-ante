effect Log with
    log: fn String -> Unit

effect Use a with
    get: fn Unit -> a
    set: fn a -> Unit

// Expect `can Use Unit` and not `can Log`
handle_basic () = 
    handle log "test1"
    | log v -> set v

use_resume () =
    handle ()
    // Test these two 'resume's refer to two different variables
    // with incompatible types
    | get () -> resume 3i32
    | set _ -> resume ()

does_use x =
    y = get ()
    set (y + x)

// args: --check --show-types
// expected stdout:
// // id = c1m14_88
// effect Log_c1m14_88 with
//     log_1: fn String_b -> Unit_b
// 
// // id = c1m14_70
// effect Use_c1m14_70 a_1 with
//     get_2: fn Unit_b -> a_1
//     set_4: fn a_1 -> Unit_b
// 
// // id = c1m14_47
// handle_basic_c1m14_47 () =
//     handle log_? "test1"
//     | log_? v_? -> set_? v_?
// 
// // id = c1m14_23
// use_resume_c1m14_23 () =
//     handle ()
// 
// // id = c1m14_99
// does_use_c1m14_99 x_1 =
//     y_? = get_? ()
//     set_? (+_? y_? x_1)

// expected stderr:
// examples/typechecking/effects.an:17:4	error: Expected an unindent but found `|`
//     | get () -> resume 3i32
// 
// examples/typechecking/effects.an:22:4	error: `set` is not defined, was it a typo?
//     set (y + x)
// 
// examples/typechecking/effects.an:22:9	error: `y` is not defined, was it a typo?
//     set (y + x)
// 
// examples/typechecking/effects.an:22:11	error: `+` is not defined, was it a typo?
//     set (y + x)

