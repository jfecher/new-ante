type FooBar = foo:I32, bar:String
type Foo = foo:F64
type Bar = bar:Char

stringify (s: String) = s

foo_and_bar a b =
    a.foo
    stringify b.bar

foobar = FooBar 1 "one"
foo = Foo 2.0
bar = Bar c"3"

main () =
    foo_and_bar foobar foobar
    foo_and_bar foo bar

// args: --show-types
// expected exit status: 101
// expected stderr:
// thread 'main' panicked at src/type_inference/type_context.rs:121:55:
// not yet implemented: Resolve named types
// note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

