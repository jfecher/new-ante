
trait Functor f with
    map: fn (f a) (fn a -> b) -> f b

trait Monad m with
    wrap: fn a -> m a
    bind: fn (m a) (fn a -> m b) -> m b


impl functor_maybe: Functor Maybe with
    map m f =
        match m
        | Some x -> Some (f x)
        | None -> None

impl monad_maybe: Monad Maybe with
    wrap a = Some a
    
    bind m f =
        match m
        | Some x -> f x
        | None -> None

// args: --show-types
// expected exit status: 101
// expected stderr:
// thread 'main' panicked at src/type_inference/cst_traversal.rs:265:9:
// not yet implemented: check_impl
// note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

