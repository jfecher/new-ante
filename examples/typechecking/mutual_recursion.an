// Multiple mutually-recursive functions must be typechecked in tandem

is_even n =
    if n == 0 then true else
        print n
        not is_odd (n - 1)

is_odd n =
    n == 1 or not is_even (n - 1)

main () = is_even 4


// Both of these definitions should have the `Print (int a)` constraint.
// TODO: is_odd here uses `forall a c.` instead of `forall a b.`

// args: --show-types
// expected stdout:
// (is_even: _0) (n: _7) =
//     if (==: (error)) (n: _7) 0 then true else 
//         (print: (error)) (n: _7)
// 
// (is_odd: _0) (n: _1) =
// 
// (main: _0) () = (is_even: fn I32 -> _2) 4

// expected stderr:
// examples/typechecking/mutual_recursion.an:4:9	error: `==` is not defined, was it a typo?
//     if n == 0 then true else
// 
// examples/typechecking/mutual_recursion.an:5:8	error: `print` is not defined, was it a typo?
//         print n
// 
// examples/typechecking/mutual_recursion.an:6:8	error: Expected an unindent but found `not`
//         not is_odd (n - 1)
// 
// examples/typechecking/mutual_recursion.an:9:14	error: Expected an unindent but found `not`
//     n == 1 or not is_even (n - 1)

