
type Struct1 = a:I32, b:F64, c:String

type Thingy = Struct1

type Generic a b = first: a, second: b

type Struct2 t =
    a: Thingy
    b: Generic t Thingy

type Union1 a b = | Variant1 | Variant2

type Option a =
   | Just a
   | Nothing

t = Option.Just 1

type MyRef a = &a

// args: --show-resolved
// expected stdout:
// // id = c1m929_4067
// type Struct1_c1m929_4067 =
//     a_?: I32
//     b_?: F64
//     c_?: String_b
// 
// // id = c1m929_1425
// type Thingy_c1m929_1425 = Struct1_c1m929_4067
// 
// // id = c1m929_2424
// type Generic_c1m929_2424 =
//     first_?: a_1
//     second_?: b_2
// 
// // id = c1m929_5535
// type Struct2_c1m929_5535 =
//     a_?: Thingy_c1m929_1425
//     b_?: Generic_c1m929_2424 t_1 Thingy_c1m929_1425
// 
// // id = c1m929_3992
// type Union1_c1m929_3992 =
//     | Variant1_c1m929_3992
//     | Variant2_c1m929_3992
// 
// // id = c1m929_1108
// type Option_c1m929_1108 =
//     | Just_c1m929_1108 a_1
//     | Nothing_c1m929_1108
// 
// // id = c1m929_9396
// t_c1m929_9396 = Option.Just_c1m929_1108 1
// 
// // id = c1m929_2555
// type MyRef_c1m929_2555 = & a_1

