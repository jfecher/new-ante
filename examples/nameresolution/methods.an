type OptionI32 =
    | None
    | Some I32

OptionI32.unwrap_or_default (self: OptionI32) =
    match self
    | OptionI32.None -> 0
    | Some x -> x

shared type Tree t =
    | Leaf t
    | Node (Tree t) (Tree t)

Tree.map (self: Tree q) (f: fn q -> z): Tree z =
    match self
    | Leaf x -> Leaf (f x)
    | Node l r -> Node (l.map f) (r.map f)

// expected stdout:
// // id = c1m12_61
// type OptionI32_c1m12_61 =
//     | None_c1m12_61
//     | Some_c1m12_61 I32
// 
// // id = c1m12_79
// OptionI32_c1m12_61.unwrap_or_default_c1m12_79 (self_2: OptionI32_c1m12_61) =
//     match self_2
//     | OptionI32.None_c1m12_61 -> 0
//     | Some_td x_3 -> x_3
// 
// // id = c1m12_66
// shared type Tree_c1m12_66 =
//     | Leaf_c1m12_66 t_1
//     | Node_c1m12_66 ((Tree_c1m12_66 t_1) (Tree_c1m12_66 t_1))
// 
// // id = c1m12_25
// Tree_c1m12_66.map_c1m12_25 (self_2: Tree_c1m12_66 q_3) (f_4: fn q_3 -> z_6) : Tree_c1m12_66 z_6 =
//     match self_2
//     | Leaf_td x_8 -> Leaf_td (f_4 x_8)
//     | Node_td l_9 r_10 -> Node_td (l_9.map f_4) (r_10.map f_4)

